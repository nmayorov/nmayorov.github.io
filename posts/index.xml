<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on My Blog</title><link>https://nmayorov.github.io/posts/</link><description>Recent content in Posts on My Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 30 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://nmayorov.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Nonlinear batch estimation</title><link>https://nmayorov.github.io/posts/nonlinear_batch_estimation/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://nmayorov.github.io/posts/nonlinear_batch_estimation/</guid><description>In this note I present a development of nonlinear batch estimation algorithm.
Model description Link to heading The state estimation problem in a nonlinear system is considered. The formulations is analogous to the linear case, but with nonlinear transition and measurement equations. We use uppercase letters to denote variables participating in the nonlinear model. Time transition and measurement equations for which are $$ Z_k = f_k(X_k) + V_k \\ X_{k+1} = h_k(X_k, W_k) $$ All the other assumptions remain the same.</description></item><item><title>Verification of Kalman filter and smoother algorithms</title><link>https://nmayorov.github.io/posts/verify_smoother/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://nmayorov.github.io/posts/verify_smoother/</guid><description>In the previous post I&amp;rsquo;ve derived formulas for a batch state estimation &amp;laquo;Kalman smoother&amp;raquo; algorithm. Here I want to provide a numerical verification of its correctness along with the classical Kalman filter algorithm.
Monte Carlo method Link to heading The invaluable method of verification of estimation algorithms is Monte Carlo simulation:
Generate a ground truth sequence of states and measurements according to the system model. It assumes generating process and measurement noises as pseudorandom numbers Run the estimation algorithm and compute its estimation errors as $\Delta x_k = \hat{x}_k - x_k$, where $\hat{x}_k$ and $x_k$ are the estimated and true state respectively at epoch $k$ Repeat steps 1 and 2 many times and compute sample mean and covariance of the errors $\Delta x_k$ for each epoch $k$ The sample mean must be close to zero and the sample covariance must match the covariance estimated by the algorithm.</description></item><item><title>Derivation of Kalman smoother from an optimization perspective</title><link>https://nmayorov.github.io/posts/rts_as_optimization/</link><pubDate>Sun, 27 Nov 2022 00:00:00 +0000</pubDate><guid>https://nmayorov.github.io/posts/rts_as_optimization/</guid><description>In this post Kalman smoother formulas are derived as a solution to an optimization problem.
Problem formulation Link to heading We consider an estimation problem for a discrete time linear stochastic system: $$ \begin{gather*} x_{k+1} = F_k x_k + G_k w_k \\ z_k = H_k x_k + v_k \\ \operatorname{E} x_0 = x_0^- \\ \operatorname{E} (x - x_0^-) (x - x_0^-)^T = P_0^- \succ 0 \\ \operatorname{E} w_k = 0 \\ \operatorname{E} w_k w_k^T = Q_k \succ 0 \\ \operatorname{E} v_k = 0 \\ \operatorname{E} v_k v_k^T = R_k \succ 0 \\ \operatorname{E} w_i w_j^T = 0 \text{ for } i \neq j \\ \operatorname{E} v_i v_j^T = 0 \text{ for } i \neq j \\ \operatorname{E} w_i v_j^T = 0 \\ \end{gather*} $$</description></item></channel></rss>